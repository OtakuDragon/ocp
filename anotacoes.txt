Anotações

=============== Format ===============

DateFormat styles DEFAULT, FULL, LONG, MEDIUM, and SHORT

static DateFormat getDateInstance(int style, Locale aLocale)

%<s joga uma exceção quando tem apenas um paramêtro

%s will print any object using its toString() method.

String comparator order

"" - EMPTY
" " - SPACE
"978" - NUMBERS
"A" - UPPERCASE
"a" - LOWERCASE

word boundary(\\b) is not a whitespace(\\s)

The default precision of %f is 6

%b when not boolean and is not null true else false

Scanner tem construtor com String, e não tem com delimitador, o método de delimitador é s.useDelimiter()

O locale de NumberFormat e DateFormat só pode ser definido no momento da construção

regex 0 ou mais, para um character que da match com 0 m.group() retorna uma String vazia

Calendar.getInstance() tem uma versão sem parametros, uma só com Locale e uma com timezone e Locale

scanner.hasNextXXX só olha o proximo token, não procura na String inteira

para %s o width define o padding e o .precision define o numero de caracteres da string
ex: out.printf("%20.1s", "aaa") imprime "a" e 19 espaços a esquerda com a flag %-20.1 seriam 19 espacos a direita

Locale myLocale = new Locale("ru", "RU"); both are two lettered codes and country codes are always upper case.

Entre dois delimitadores em sequência é considerado que existe um token ""(empty string)

Default delimiters i.e. " \t\n\r\f" will be used to tokenize the string, qualquer combinação deles em sequência conta como um delimitador ex: \t\t\t\ n\n \t\r é um delimitador

MissingResourceException, if no resource bundle for the specified base name can be found

=============== IO ===============

path.getName(int) é 0-based(indexed)

path.getRoot() retorna o root ou null se for um caminho relativo

path.subPath(int, int) retorna uma parte do path o segundo int não é incluido

SimpleFileVisitor.visitFile(Path) caminho completo do arquivo

. = current directory .. = parent directory

relativize se um dos paths tiver root(for absoluto) e o outro não, joga IllegalArgumentException

relativize() e resolve() não normalizam seus paths ou seja .. e . contam como diretorios do calculo

relativize é como chegar em um caminho atráves de outro de forma relativa, caso exista um arquivo no caminho você "sai" do arquivo com .. como se fosse um diretório.

File attributes: BASIC, size, creationTime, lastAccessTime, lastModifiedTime, isDirectory, isOther, isRegularFile, isSymbolicLink  DOS readonly, hidden, system,archive, POSIX permissions,group,owner

path.resolveSibling(String) cria um path com o valor da String no mesmo diretório de path

Files.newBufferedWriter java.lang.IllegalArgumentException: APPEND + TRUNCATE_EXISTING not allowed

Files.newBufferedReader() throws NoSuchFileException

BufferedWriter nao tem metodo writeUTF()

path.getFileName() retorna um objeto path só com a parte final do caminho o ultimo diretório ou o nome do arquivo do path.

WatchKey valid states Ready, Signaled

StandardWatchEventKinds.OVERFLOW não precisa registrar para receber, ENTRY_DELETE, ENTRY_CREATE count() sempre 1, ENTRY_MODIFY count() 1 ou mais.

Files.setAttribute(path, "dos:hidden", true);

Para copy() e move() o comportamento padrão é jogar uma exceção se o Path(arquivo ou diretório) target já existir.

BufferedWriter br = Files.newBufferedWriter(myPath, Charset.forName("UTF-8"), new OpenOption[]{StandardOpenOption.APPEND, StandardOpenOption.DSYNC}); SYNC = File content e metadata síncronizados DSYNC = File content síncronizado e metadata dessincronizado

Files.newBufferedWriter StandardOpenOption.READ = java.lang.IllegalArgumentException: READ not allowed

D in DSYNC is for data

READ and TRUNCATE_EXISTING (or WRITE, APPEND, or DELETE_ON_CLOSE, CREATE, CREATE_NEW, SYNC, DSYNC) cannot go together.

RandomAccessFile(File/String file, String mode) throws FileNotFoundException, modes r, rw, rws(SYNC), rwd(DSYNC)

FileInputStream, FileOutputStream, and RandomAccessFile do have a getChannel()

=============== Class Design ===============

Em uma referencia de superclasse é possível que tenha subclasse em classes não relacionadas a compilação falha

Private means private to the class and not to the object

private dentro de non-static inner class é acessivel para a outer class

uma subclasse não pode ver um membro protected de uma referencia da superclasse super.protectedMember

variables are SHADOWED and methods are OVERRIDDEN.

If the equals() method returns true, then hashCode() for both the objects must return the same value. Não necessariamente considerando todos os atributos comparados em equals

em uma classe que não sobreescreve hashCode()(comportamento padrão) dois objetos que são ==(mesmo objeto) retornam o mesmo hashCode()

instanceof não compila se os tipos de não forem compativeis, relacionados por herança

quando o catch e o finally jogam excecao em um try normal a excecao jogada é a do finally a do catch é ignorada

variavels declaradas em um try with resources são final

em um try with resources se o construtor ou o método close() declarar que joga alguma checked exception,
elas devem ser tradatas em catch ou throws, senão não compila.

A ordem dos cases no switch não importa, todas as comparaçoes são feitas

referenciar uma variavel ambigua causa erro de compilacao independente do modificador final

the overriding declaration must have a throws clause that is compatible with ALL the overridden declarations, or no throws declaration

protected is less restrictive than package access, A class can only have either public or no access modifier

you cannot access a non-final static field from an enum's constructor.

OuterClass.this e InnerClass.this em uma non-static inner class são declarações válidas InnerClass.this é o mesmo que this

Automatic variable = method local, inner class dentro de método static também é static

volatile não é um lock, é só uma instrução para que threads não guardem o valor da váriavel em cache, e sempre leiam da memória RAM.

java [ -enableassertions | -ea ] [:<package name>... | :<class name> ] With no arguments, the switch enables assertions by default. With one argument ending in "...", assertions are enabled in the specified package and any subpackages by default. If the argument is simply "...", assertions are enabled in the unnamed package in the current working directory. With one argument not ending in "...", assertions are enabled in the specified class

Non-static inner classes não podem ter membros static, só se forem primitivos e final.

When a programmer does not define ANY constructor, the compiler inserts one automatically, the access modifier of which is same as that of the class

constructors and initializers are not invoked during deserialization

Uma classe Serializable com superclasses não Serializable pode ser serializada só que as variaveis os inicializadores e construtores das superclasses
serão chamados(elas são serão serializadas) e se alguma das superclasses não possuir um construtor sem  argumentos a desserialização falha.

Evaluation always left to right

An enum cannot be defined inside any method or constructor.

=============== Threads ===============

interrupt() se a Thread estiver em wait(), sleep(), join() metodos que jogam InterruptedException é jogada uma Interrupted exception, se não a flag de isInterrupted é setada

WatchService poll() pega a WatchKey imediatamente ou após um delay e take() espera pela próxima WatchKey, uma WatchKey tem uma lista de WatchEvents

poll() tem um overload que recebe um long e um TimeUnit e não tem uma apenas com long.

RecursiveTask<T> retorna um objeto do tipo T tanto para no método compute() para processamento sincrono como join() para processamento assíncrono

avoid deadlock get locks in same order

AtomicInteger, Long, Boolean todos os métodos que mudam são duas operaçoes, compareAndGet, getAndSet...

RecursiveAction(sem retorno) e RecursiveTask(com retorno) são classes abstratas

lock.lock() retorna void e lock.tryLock() retorna boolean

yield() é static

Concept to note here is that calling notify/notifyAll does not release the lock. A lock is not released until the thread exits a synchronized block or method.

Thread.sleep() does not release the lock

chamar thread.setDaemon(boolean) depois de thread.start() causa uma IllegalThreadStateException

Lock.lock() chamado multiplas vezes não joga exceção, chamar unlock() mais vezes do que foi chamado lock() joga java.lang.IllegalMonitorStateException

=============== Generics ===============

Overload de método que recebe parametro generico não aceita Object, outros tipos sim

in a List<?> you can't add anything but can get objects with type Object

list.addAll(new ArrayList<>()) não compila

Um parametro de tipo generico é considerado como tipo ? extends Object, da pra chamar os metodos de Object nele

=============== Collections ===============

Binary search returns index of the search key, if it is contained in the list; otherwise, (-(insertion point) - 1)

Deque, offer/add poll/remove, add to the end and remove from the front, push pop add to the front and remove from the front, there is no pushFirst or Last mas para os metodos de Queue existem versoes first e last

map.put() retorna o value substituido para uma key on null se o mapa ainda nao tinha aquela key

NavigableSet

higher - higher (greater)
ceiling - higher or equal

lower - lower (smaller)
floor - lower or equal

LinkedList is a Queue

ConcurrentMap It is a Map providing additional atomic putIfAbsent, remove, and replace methods. todos esses métodos recebem chave e valor.

NavigableMap<K,V> tailMap(K key, boolean inclusive) , submapa do mapa original ligado ao mapa original apenas com elementos maior ou igual a key(depende do boolean)

CopyOnWriteArrayList.addAll() é atomico(sincronizado com Lock)

CopyOnWriteArrayList is List, not a ArrayList

Inserting null key or null value in a ConcurrentHashMap will throw a NullPointerException

Collections.sort() e Arrays.sort() jogam NullPointerException quando ordenando coleções/arrays de tipos wrappers

=============== JDBC ===============

A JDBC API implementation must support Entry Level SQL92 plus the SQL command Drop Table

ResultSet tem metodos getXXX para leitura e updateXXX para escrita, e nao tem setXXX

CachedRowset.acceptChanges() executa as alteracoes feitas ao rowset no banco de dados

JdbcRowSet e CachedRowSet implemetam Joinable e tem uma match column em um JoinRowSet cada rowset tem sua matchcolumn e o valor de todas tem que bater com as outras para aparecerem registros

setAutoCommit(true) or even setAutoCommit(false), se mudar o valor atual da conexão causa um commit

Predicate boolean evaluate(RowSet rs) - chamado para cada movimentação do cursor(next(), previous()...) do rowset passando o rowset atual com o cursor posicionado para validação da linha atual de acordo com a condição do predicate.

PreparedStatement has specific methods for additional SQL column type such as setBlob(int parameterIndex, Blob x) and setClob(int parameterIndex, Clob x).

RowSet extends ResultSet

resultSet.getMetaData() retorna ResultSetMetadata que tem vários métodos que recebem o int do indice da coluna e dá informações sobre a coluna
e tem o getColumnCount().